#include <iostream>
#include <string>
#include <iterator>
#include <cmath>

using namespace std;
void MenuMessage(){
    cout<<"MAIN MENU\nPlease Choose your action:\n1- View Total Orders\n2- Take an Order\n3- Exit and End Shift";
}
void OrderMessage(){
    cout<<"What would you like to order?\n1- Ala Carte Meal\n2-Combo meal\n";
}
void messageBreak(){
    cout<<"\n";
    for(int i=0; i<50;i++)
    cout<<"=";
    cout<<"\n";
}

void WelcomeMessage(){
    
    messageBreak();
    MenuMessage();
    messageBreak();
}

double roundTo2DP(double value) {
    return round(value * 100.0) / 100.0;
}

int OrderType(){
    int Type=0;
    cin>>Type;
    while(Type != 1 && Type !=2){
        cout<<"\nThat is not a choice! Please choose 1 or 2!:";
        cin>>Type;
    }
    
    return Type;
}

int ChoosingMenu(){
    int Choice;
    cin>>Choice;
    while(Choice != 1 && Choice !=2 && Choice !=3){
        cout<<"\nThat is not a choice! Please choose 1 or 2!:";
        cin>>Choice;
    }
    return Choice;
}

class TakingOrders{
    public:
    inline static int totalOrdersAla;
    inline static int totalOrdersCombo;
    int tempOrderAla=0;
    int tempOrderCombo=0;
    double tempTotalCost=0;
    string name;
    int OT=0;
    int ChangeOrderRequest=0;
    string MealName[2]={"Ala Carte meal","Combo Meal"};
    double MealPrice[2]={2.34,4.56};
    void Orders(){
        OrderMessage();
        OT=OrderType();
        gettingOrders();
        ChangingOrder();
        OrderReceipt(tempOrderAla,tempOrderCombo);
    }
    
    private:
    int OrderAmount=0;
    
    int gettingOrders(){
        
        
        cout<<"How many of "<<MealName[--OT]<<" would you like?:";
        cin>>OrderAmount;
        while(OrderAmount>10 || OrderAmount<1){
            cout<<"The order amount can't be more than 10 or less than 1!";
            messageBreak();
         cout<<"Please Order again:";
            cin>>OrderAmount;
         }
        cout<<"Alright that would be "<<OrderAmount<<" of "<<MealName[OT]<<" to your order!\n";
        if(OT ==0)
        tempOrderAla=OrderAmount;
        else
        tempOrderCombo=OrderAmount;
        return OrderAmount;
    }
    void OrderReceipt(int NumAla, int NumCombo){
        int Quantity[2]= {NumAla,NumCombo};
        messageBreak();
        cout<<"Thank you for Ordering , Here is your Receipt:\n";
        for(int j=0;j<size(Quantity);j++){
            if(Quantity[j]!=0){
            cout<<MealName[j]<<" - "<<Quantity[j]<<" |  ";
            cout<<"$ "<<roundTo2DP(Quantity[j]*MealPrice[j])<<"\n";
            tempTotalCost+=Quantity[j]*MealPrice[j];
            
            }
        }
        cout<<"Total Cost: $"<<tempTotalCost;
        tempTotalCost =0;
        tempOrderAla=0;
        tempOrderCombo=0;
        messageBreak();
    }
    
    
    void ChangingOrder(){
        while(ChangeOrderRequest!=2){
            cout<<"Would you like add or change your order?\n1-Yes\n2-No\n";
            cin>>ChangeOrderRequest;
            while(ChangeOrderRequest != 1 && ChangeOrderRequest !=2){
                cout<<"\nThat is not a choice! Please choose 1 or 2!:";
                cin>>ChangeOrderRequest;
                }
            if(ChangeOrderRequest ==1){
                messageBreak();
                OrderMessage();
                messageBreak();
                OT=OrderType();
                gettingOrders();
        
            }
        }
        totalOrdersAla+=tempOrderAla;
        totalOrdersCombo+=tempOrderCombo;
        ChangeOrderRequest=0;
        
    }
    
    
};

class MainMenu{
    public:
    int MenuChoice;
    double TotalCost=0;
    bool EndOfShift=true;
    TakingOrders Order;
    MainMenu(){
        cout<<"Welcome to Big's Burgers and fries!";
        while(EndOfShift){
        WelcomeMessage();
        MenuChoice=ChoosingMenu();
        switch(MenuChoice){
            case 1:
            TotalOrder(Order.totalOrdersAla,Order.totalOrdersCombo);
            break;
            case 2:
            Order.Orders();
            break;
            
            default:
            ShiftEnd();
            break;
        }
        
        }
        
        
    }
    private:
    void TotalOrder(int NumAla, int NumCombo){
        int Quantity[2]= {NumAla,NumCombo};
        messageBreak();
        cout<<"Here's the total orders so far:\n";
        for(int j=0;j<size(Quantity);j++){
            if(Quantity[j]!=0){
            cout<<Order.MealName[j]<<" - "<<Quantity[j]<<" |  ";
            cout<<"$ "<<roundTo2DP(Quantity[j]*Order.MealPrice[j])<<"\n";
            TotalCost+=Quantity[j]*Order.MealPrice[j];
            }
        }
        cout<<"Total Cost: $"<<TotalCost;
        TotalCost=0;
        messageBreak();
    }
    void ShiftEnd(){
        cout<<"Thank you for your hard work! Here's the total Order for today:\n";
        TotalOrder(Order.totalOrdersAla,Order.totalOrdersCombo);
        EndOfShift=false;
    }
    
};

int main()
{  
    
    MainMenu StartUp;
    
    return 0;
}
